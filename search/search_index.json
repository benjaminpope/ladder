{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PHYS3080 Distance Ladder Materials to help students get started in the PHYS3080 Distance Ladder project at UQ! Host Benjamin Pope Overview If you're reading this, welcome! I'm excited to have you in our class. These (evolving) documents are to help you get to know the tools and ideas that will be important in working together on these projects. Check out the links on the left to browse the resources.","title":"Home"},{"location":"#phys3080-distance-ladder","text":"Materials to help students get started in the PHYS3080 Distance Ladder project at UQ!","title":"PHYS3080 Distance Ladder"},{"location":"#host","text":"Benjamin Pope","title":"Host"},{"location":"#overview","text":"If you're reading this, welcome! I'm excited to have you in our class. These (evolving) documents are to help you get to know the tools and ideas that will be important in working together on these projects. Check out the links on the left to browse the resources.","title":"Overview"},{"location":"matlab/","text":"matlab.md Most professional data scientists, physicists and astronomers use the open-source Python as their main interpreted language, with substantial minorities using open-source languages R Julia and the closed-source IDL . It has been common for universities to teach students Matlab, but this is increasingly uncommon in physics outside of engineering contexts, and requires expensive closed-source licenses. I personally don't recommend you practise Matlab unless you are going mainly into engineering, but if you are already familiar with it, it is well suited to this project. Here are some resources for using Matlab for the Distance Ladder project. Loading data Script to read the data given in the allpoints and fuzzypoints data files and convert them into .csv files according to the camera location. Files need to be saved as allpoint.txt and allfuzzy.txt in the same folder directory as this script is saved in. Thanks for Kyle Clunies-Ross for writing this script! clc; clear all; %% Importing data filename1 = 'allpoint.txt'; filename2 = 'allfuzzy.txt'; startRow = 2; endRow = inf; %creating file IDs fileID1 = fopen(filename1,'r'); fileID2 = fopen(filename2,'r'); %set up the formatting for the arrays formatSpec = '%5C%11f%8f%9f%9f%9f%8f%f%[^\\n\\r]'; %Making an array from the files dataArray1 = textscan(fileID1, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); dataArray2 = textscan(fileID2, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); for block=2:length(startRow) frewind(fileID1); frewind(fileID2); dataArrayBlock1 = textscan(fileID1, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); dataArrayBlock2 = textscan(fileID2, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); for col=1:length(dataArray1) dataArray1{col} = [dataArray1{col};dataArrayBlock1{col}]; end for col=1:length(dataArray2) dataArray2{col} = [dataArray2{col};dataArrayBlock2{col}]; end end %Close files fclose(fileID1); fclose(fileID2); %set up tables from the arrays allpointData = table(dataArray1{1:end-1}, 'VariableNames', {'Cam','X','Y','BlueFlx','GreenFlx','RedFlx','Par','RV'}); allfuzzyData = table(dataArray2{1:end-1}, 'VariableNames', {'Cam','X','Y','BlueFlx','GreenFlx','RedFlx','Size','RV'}); %% Putting the data from the tables into individual matrices Name1 = [\"Cam\",\"X\",\"Y\",\"BlueFlx\",\"GreenFlx\",\"RedFlx\",\"Par\",\"RV\"]; %writing headers for i = 1:size(allpointData,2) Back1(1,i) = Name1(1,i); Front1(1,i) = Name1(1,i); Left1(1,i) = Name1(1,i); Right1(1,i) = Name1(1,i); Up1(1,i) = Name1(1,i); Down1(1,i) = Name1(1,i); end Name2 = [\"Cam\",\"X\",\"Y\",\"BlueFlx\",\"GreenFlx\",\"RedFlx\",\"Size\",\"RV\"]; %writing headers for i = 1:size(allpointData,2) Back2(1,i) = Name2(1,i); Front2(1,i) = Name2(1,i); Left2(1,i) = Name2(1,i); Right2(1,i) = Name2(1,i); Up2(1,i) = Name2(1,i); Down2(1,i) = Name2(1,i); end a = 1; %These variables used to index the matrices b = 1; c = 1; d = 1; e = 1; f = 1; %Writing these values to matrices for i = 1:size(allpointData,1) if allpointData{i,1} == 'Back' a = a + 1; for n = 1:size(allpointData,2) Back1(a,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Front' b = b + 1; for n = 1:size(allpointData,2) Front1(b,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Left' c = c + 1; for n = 1:size(allpointData,2) Left1(c,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Right' d = d + 1; for n = 1:size(allpointData,2) Right1(d,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Up' e = e + 1; for n = 1:size(allpointData,2) Up1(e,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Down' f = f + 1; for n = 1:size(allpointData,2) Down1(f,n) = string(allpointData{i,n}); end end end a = 1; %Resetting these variables b = 1; c = 1; d = 1; e = 1; f = 1; for i = 1:size(allfuzzyData,1) if allfuzzyData{i,1} == 'Back' a = a + 1; for n = 1:size(allfuzzyData,2) Back2(a,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Front' b = b + 1; for n = 1:size(allfuzzyData,2) Front2(b,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Left' c = c + 1; for n = 1:size(allfuzzyData,2) Left2(c,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Right' d = d + 1; for n = 1:size(allfuzzyData,2) Right2(d,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Up' e = e + 1; for n = 1:size(allfuzzyData,2) Up2(e,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Down' f = f + 1; for n = 1:size(allfuzzyData,2) Down2(f,n) = string(allfuzzyData{i,n}); end end end %% Writing all this data to individual csv files file1 = fopen('allpointBack.csv','w'); file2 = fopen('allpointDown.csv','w'); file3 = fopen('allpointFront.csv','w'); file4 = fopen('allpointLeft.csv','w'); file5 = fopen('allpointRight.csv','w'); file6 = fopen('allpointUp.csv','w'); file7 = fopen('allfuzzyBack.csv','w'); file8 = fopen('allfuzzyDown.csv','w'); file9 = fopen('allfuzzyFront.csv','w'); file10 = fopen('allfuzzyLeft.csv','w'); file11 = fopen('allfuzzyRight.csv','w'); file12 = fopen('allfuzzyUp.csv','w'); fprintf(file1,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Back1.'); fprintf(file2,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Down1.'); fprintf(file3,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Front1.'); fprintf(file4,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Left1.'); fprintf(file5,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Right1.'); fprintf(file6,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Up1.'); fprintf(file7,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Back2.'); fprintf(file8,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Down2.'); fprintf(file9,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Front2.'); fprintf(file10,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Left2.'); fprintf(file11,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Right2.'); fprintf(file12,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Up2.'); fclose(file1); fclose(file2); fclose(file3); fclose(file4); fclose(file5); fclose(file6); fclose(file7); fclose(file8); fclose(file9); fclose(file10); fclose(file11);","title":"Matlab Scripts"},{"location":"matlab/#matlabmd","text":"Most professional data scientists, physicists and astronomers use the open-source Python as their main interpreted language, with substantial minorities using open-source languages R Julia and the closed-source IDL . It has been common for universities to teach students Matlab, but this is increasingly uncommon in physics outside of engineering contexts, and requires expensive closed-source licenses. I personally don't recommend you practise Matlab unless you are going mainly into engineering, but if you are already familiar with it, it is well suited to this project. Here are some resources for using Matlab for the Distance Ladder project.","title":"matlab.md"},{"location":"matlab/#loading-data","text":"Script to read the data given in the allpoints and fuzzypoints data files and convert them into .csv files according to the camera location. Files need to be saved as allpoint.txt and allfuzzy.txt in the same folder directory as this script is saved in. Thanks for Kyle Clunies-Ross for writing this script! clc; clear all; %% Importing data filename1 = 'allpoint.txt'; filename2 = 'allfuzzy.txt'; startRow = 2; endRow = inf; %creating file IDs fileID1 = fopen(filename1,'r'); fileID2 = fopen(filename2,'r'); %set up the formatting for the arrays formatSpec = '%5C%11f%8f%9f%9f%9f%8f%f%[^\\n\\r]'; %Making an array from the files dataArray1 = textscan(fileID1, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); dataArray2 = textscan(fileID2, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); for block=2:length(startRow) frewind(fileID1); frewind(fileID2); dataArrayBlock1 = textscan(fileID1, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); dataArrayBlock2 = textscan(fileID2, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\\r\\n'); for col=1:length(dataArray1) dataArray1{col} = [dataArray1{col};dataArrayBlock1{col}]; end for col=1:length(dataArray2) dataArray2{col} = [dataArray2{col};dataArrayBlock2{col}]; end end %Close files fclose(fileID1); fclose(fileID2); %set up tables from the arrays allpointData = table(dataArray1{1:end-1}, 'VariableNames', {'Cam','X','Y','BlueFlx','GreenFlx','RedFlx','Par','RV'}); allfuzzyData = table(dataArray2{1:end-1}, 'VariableNames', {'Cam','X','Y','BlueFlx','GreenFlx','RedFlx','Size','RV'}); %% Putting the data from the tables into individual matrices Name1 = [\"Cam\",\"X\",\"Y\",\"BlueFlx\",\"GreenFlx\",\"RedFlx\",\"Par\",\"RV\"]; %writing headers for i = 1:size(allpointData,2) Back1(1,i) = Name1(1,i); Front1(1,i) = Name1(1,i); Left1(1,i) = Name1(1,i); Right1(1,i) = Name1(1,i); Up1(1,i) = Name1(1,i); Down1(1,i) = Name1(1,i); end Name2 = [\"Cam\",\"X\",\"Y\",\"BlueFlx\",\"GreenFlx\",\"RedFlx\",\"Size\",\"RV\"]; %writing headers for i = 1:size(allpointData,2) Back2(1,i) = Name2(1,i); Front2(1,i) = Name2(1,i); Left2(1,i) = Name2(1,i); Right2(1,i) = Name2(1,i); Up2(1,i) = Name2(1,i); Down2(1,i) = Name2(1,i); end a = 1; %These variables used to index the matrices b = 1; c = 1; d = 1; e = 1; f = 1; %Writing these values to matrices for i = 1:size(allpointData,1) if allpointData{i,1} == 'Back' a = a + 1; for n = 1:size(allpointData,2) Back1(a,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Front' b = b + 1; for n = 1:size(allpointData,2) Front1(b,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Left' c = c + 1; for n = 1:size(allpointData,2) Left1(c,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Right' d = d + 1; for n = 1:size(allpointData,2) Right1(d,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Up' e = e + 1; for n = 1:size(allpointData,2) Up1(e,n) = string(allpointData{i,n}); end elseif allpointData{i,1} == 'Down' f = f + 1; for n = 1:size(allpointData,2) Down1(f,n) = string(allpointData{i,n}); end end end a = 1; %Resetting these variables b = 1; c = 1; d = 1; e = 1; f = 1; for i = 1:size(allfuzzyData,1) if allfuzzyData{i,1} == 'Back' a = a + 1; for n = 1:size(allfuzzyData,2) Back2(a,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Front' b = b + 1; for n = 1:size(allfuzzyData,2) Front2(b,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Left' c = c + 1; for n = 1:size(allfuzzyData,2) Left2(c,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Right' d = d + 1; for n = 1:size(allfuzzyData,2) Right2(d,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Up' e = e + 1; for n = 1:size(allfuzzyData,2) Up2(e,n) = string(allfuzzyData{i,n}); end elseif allfuzzyData{i,1} == 'Down' f = f + 1; for n = 1:size(allfuzzyData,2) Down2(f,n) = string(allfuzzyData{i,n}); end end end %% Writing all this data to individual csv files file1 = fopen('allpointBack.csv','w'); file2 = fopen('allpointDown.csv','w'); file3 = fopen('allpointFront.csv','w'); file4 = fopen('allpointLeft.csv','w'); file5 = fopen('allpointRight.csv','w'); file6 = fopen('allpointUp.csv','w'); file7 = fopen('allfuzzyBack.csv','w'); file8 = fopen('allfuzzyDown.csv','w'); file9 = fopen('allfuzzyFront.csv','w'); file10 = fopen('allfuzzyLeft.csv','w'); file11 = fopen('allfuzzyRight.csv','w'); file12 = fopen('allfuzzyUp.csv','w'); fprintf(file1,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Back1.'); fprintf(file2,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Down1.'); fprintf(file3,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Front1.'); fprintf(file4,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Left1.'); fprintf(file5,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Right1.'); fprintf(file6,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Up1.'); fprintf(file7,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Back2.'); fprintf(file8,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Down2.'); fprintf(file9,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Front2.'); fprintf(file10,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Left2.'); fprintf(file11,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Right2.'); fprintf(file12,'%s,%s,%s,%s,%s,%s,%s,%s,\\n',Up2.'); fclose(file1); fclose(file2); fclose(file3); fclose(file4); fclose(file5); fclose(file6); fclose(file7); fclose(file8); fclose(file9); fclose(file10); fclose(file11);","title":"Loading data"},{"location":"software/","text":"Software Practices The command line You'll want to have access to a computer with a command line interface - on Mac or Linux, this is just going to be via the app Terminal. On Windows this is called the Command Prompt. (If you have trouble installing you can also use the Google Colab I will mention later!) Installing Python Most software development will be done in Python, and I recommend using Anaconda to install Python 3 and pip to manage packages. What it does is create its own version of Python that doesn't interfere with your default install, and has 'environments' into which you can install software safely that doesn't interact with software in other environments. There is a great conda cheat sheet with lots of tools to help you use Conda. To install Python on a Mac or Linux machine, I recommend you install Conda from here , and then create and load an environment with important software pre-installed: - pip , which installs other Python packages, - numpy , which is a general-purpose maths library, - astropy , which has lots of functions for astronomy, including how we will load data, and the Lomb-Scargle Periodogram for period determination, - scipy , with miscellaneous scientific python features, and - ipykernel , which runs Jupyter notebooks. conda init conda create --name ladder python=3.9 pip numpy matplotlib astropy scipy ipykernel conda activate ladder Then you can work to your heart's content in this conda environment. Jupyter Notebooks The main way that professional data scientists, physicists, and astronomers interactively use Python is through the Jupyter Notebook environment. This is an interactive, browser-based interpreter for Python. If you install Conda like above, you'll be good to go with the terminal command jupyter notebook . On the other hand, you might like to use Google Colab , a free web-hosted Jupyter notebook environment that works like Google Docs. Try it here ! Git Repositories How do you share code with your colleagues? This is an important skill not just for this course - but anything you do down the track in science, software engineering, or the commercial sector. This doesn't just apply to Python scripts you'll write here, but to any sort of code - including this website. You want to have everything in a repository , which is a remote server in the cloud that has all your software backed up, with saved checkpoints you can go back to if something is wrong. The most popular software for interacting with repositories is git , and there are two big companies that offer comparable cloud storage for your repos: - Atlassian offers BitBucket - Microsoft runs GitHub You can share these codes with your teammates and jointly collaborate on a project. The user interface is a little harder than Google Docs but I recommend you master it - it is a huge transferable skill. All my code is version-controlled github.com/benjaminpope . On my local machine I made a directory /Users/benjaminpope/code/ cd . mkdir code and you can download a repo (like this website as an example!) to your machine like this: cd code git clone https://github.com/benjaminpope/ladder/ cd ladder Making Open-Source Software Christina Hedges (NASA Ames) has a fantastic introduction to open-source software practices for astronomy, in which the above tools and many others are explained, for an audience of ~ PhD students: christinahedges.github.io/astronomy_workflow","title":"Learning Python"},{"location":"software/#software-practices","text":"","title":"Software Practices"},{"location":"software/#the-command-line","text":"You'll want to have access to a computer with a command line interface - on Mac or Linux, this is just going to be via the app Terminal. On Windows this is called the Command Prompt. (If you have trouble installing you can also use the Google Colab I will mention later!)","title":"The command line"},{"location":"software/#installing-python","text":"Most software development will be done in Python, and I recommend using Anaconda to install Python 3 and pip to manage packages. What it does is create its own version of Python that doesn't interfere with your default install, and has 'environments' into which you can install software safely that doesn't interact with software in other environments. There is a great conda cheat sheet with lots of tools to help you use Conda. To install Python on a Mac or Linux machine, I recommend you install Conda from here , and then create and load an environment with important software pre-installed: - pip , which installs other Python packages, - numpy , which is a general-purpose maths library, - astropy , which has lots of functions for astronomy, including how we will load data, and the Lomb-Scargle Periodogram for period determination, - scipy , with miscellaneous scientific python features, and - ipykernel , which runs Jupyter notebooks. conda init conda create --name ladder python=3.9 pip numpy matplotlib astropy scipy ipykernel conda activate ladder Then you can work to your heart's content in this conda environment.","title":"Installing Python"},{"location":"software/#jupyter-notebooks","text":"The main way that professional data scientists, physicists, and astronomers interactively use Python is through the Jupyter Notebook environment. This is an interactive, browser-based interpreter for Python. If you install Conda like above, you'll be good to go with the terminal command jupyter notebook . On the other hand, you might like to use Google Colab , a free web-hosted Jupyter notebook environment that works like Google Docs. Try it here !","title":"Jupyter Notebooks"},{"location":"software/#git-repositories","text":"How do you share code with your colleagues? This is an important skill not just for this course - but anything you do down the track in science, software engineering, or the commercial sector. This doesn't just apply to Python scripts you'll write here, but to any sort of code - including this website. You want to have everything in a repository , which is a remote server in the cloud that has all your software backed up, with saved checkpoints you can go back to if something is wrong. The most popular software for interacting with repositories is git , and there are two big companies that offer comparable cloud storage for your repos: - Atlassian offers BitBucket - Microsoft runs GitHub You can share these codes with your teammates and jointly collaborate on a project. The user interface is a little harder than Google Docs but I recommend you master it - it is a huge transferable skill. All my code is version-controlled github.com/benjaminpope . On my local machine I made a directory /Users/benjaminpope/code/ cd . mkdir code and you can download a repo (like this website as an example!) to your machine like this: cd code git clone https://github.com/benjaminpope/ladder/ cd ladder","title":"Git Repositories"},{"location":"software/#making-open-source-software","text":"Christina Hedges (NASA Ames) has a fantastic introduction to open-source software practices for astronomy, in which the above tools and many others are explained, for an audience of ~ PhD students: christinahedges.github.io/astronomy_workflow","title":"Making Open-Source Software"},{"location":"tools/","text":"Astronomy Tools Here are some essential web tools for astronomy. Astrophysics Data System (ADS) You can find almost any publication in astronomy using the powerful search engine for papers ADS , the Astrophysics Data System. There is a lot of cool functionality here! You can search by first author, other authors, year, words in the title or abstract - but also remember to create libraries (eg this one of all my papers) to help organize things. The number one use case is finding papers - and the number two is creating BibTeX citation refs to go in your papers. SIMBAD The search engine for stars, SIMBAD , is your friend. Nearly all stars have many identifiers in many different catalogs - how do you know which is which? Search it in SIMBAD, by name, coordinates, or whatever, and you can bring up lots of metadata (including publications that refer to that star). VizieR From the same team that brought you SIMBAD comes VizieR , a tool for manipulating astronomical catalogues and databases. Want to cross-match two surveys? VizieR provides painless ways to do this! MAST The Mikulski Archive for Space Telescopes archives all NASA space telescope data. You can search all NASA data on MAST using this web interface . Web Tess Viewing Tool The Web Tess Viewing Tool a great way to find out if any particular star is in TESS - and if so, when?","title":"Astronomy Tools"},{"location":"tools/#astronomy-tools","text":"Here are some essential web tools for astronomy.","title":"Astronomy Tools"},{"location":"tools/#astrophysics-data-system-ads","text":"You can find almost any publication in astronomy using the powerful search engine for papers ADS , the Astrophysics Data System. There is a lot of cool functionality here! You can search by first author, other authors, year, words in the title or abstract - but also remember to create libraries (eg this one of all my papers) to help organize things. The number one use case is finding papers - and the number two is creating BibTeX citation refs to go in your papers.","title":"Astrophysics Data System (ADS)"},{"location":"tools/#simbad","text":"The search engine for stars, SIMBAD , is your friend. Nearly all stars have many identifiers in many different catalogs - how do you know which is which? Search it in SIMBAD, by name, coordinates, or whatever, and you can bring up lots of metadata (including publications that refer to that star).","title":"SIMBAD"},{"location":"tools/#vizier","text":"From the same team that brought you SIMBAD comes VizieR , a tool for manipulating astronomical catalogues and databases. Want to cross-match two surveys? VizieR provides painless ways to do this!","title":"VizieR"},{"location":"tools/#mast","text":"The Mikulski Archive for Space Telescopes archives all NASA space telescope data. You can search all NASA data on MAST using this web interface .","title":"MAST"},{"location":"tools/#web-tess-viewing-tool","text":"The Web Tess Viewing Tool a great way to find out if any particular star is in TESS - and if so, when?","title":"Web Tess Viewing Tool"}]}